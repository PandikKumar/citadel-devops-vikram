############################################################
# Ping Identity DevOps values.yaml
############################################################
# The yaml is seperated into 2 major sections:
#  - global - Represents the base set of values that will
#             be used for each product, if that product
#             doesn't override the global values.
#
#  - image  - For every image/product, the values will
#             be merged with the global settings, and
#             take precedence.
############################################################

############################################################
# Global values
############################################################
global:
  annotations: {}
  envs: {}

  ############################################################
  #  addReleaseNameToResource: Provides global ability to add
  #                            names to kubernetes resources
  #                      none: No use of Release.Name
  #                    append: Appends the Release.Name
  #                   prepend: Prepends the Release.Name ** DEFAULT **
  ############################################################
  addReleaseNameToResource: prepend
  ############################################################
  # Ingress
  #
  #          ingress.enabled: {true | false}
  # ingress.addReleaseToHost: {prepend | append | subdomain | none}
  #    ingress.defaultDomain: Replaces with "_defaultDomain_" in host fields
  # ingress.defaultTlsSecret: Replaces with "_defaultTlsSecret_" in tls.secretName
  ############################################################
  ingress:
    enabled: false
    addReleaseNameToHost: subdomain
    defaultDomain: example.com
    defaultTlsSecret:
    annotations: {}
      # nginx example
      # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      # kubernetes.io/ingress.class: "nginx-public"

  ############################################################
  # Internal Certificates
  #
  # If set to true, then an internal certificate secret will
  # be created along with mount of the certificate in
  # /run/secrets/internal-cert (creates a tls.crt and tls.key)
  #
  # By default the Issuer of the cert will be the service name
  # created by the Helm Chart.  Additionally, the ingress hosts,
  # if enabled, will be added to the list of X509v3 Subject Alternative Name
  #
  # Use the additionalHosts and additionalIPs if additional custom
  # names and ips are needed.
  #
  #      privateCert.generate: {true | false}
  #      privateCert.additionalHosts: {optional array of hosts}
  #      privateCert.additionalIPs: {optional array of IP Addresses}
  ############################################################
  privateCert:
    generate: false
    additionalHosts: []
    additioanlIPs: []

  ############################################################
  # Fields used to annotate secret hashicorp vault information
  #
  # Theese annotations names will be automatically be
  # appended to the 'vault.hashicorp.com/'
  #
  # https://www.vaultproject.io/docs/platform/k8s/injector/annotations
  ############################################################
  vault:
    enabled: false
    hashicorp:
      annotations:
        agent-inject: true
        agent-init-first: true
        agent-pre-populate-only: true
        log-level: info
        preserve-secret-case: true
        role: k8s-default
        secret-volume-path: /run/secrets
        serviceAccountName: vault-auth
  #   secrets:
  #     {secret-name}:
  #       {secret-key | to-json}:
  #         path: /opt/in/some/location/secrets
  #         file: devops-secret.env

  ############################################################
  # Image
  #
  # By default the images uses will be indicated by these
  # variables.  An example might look like:
  #
  #   pingidentity/pingdataconsole:2103 (March, 2021)
  #
  # NOTE: image.name MUST be set in child chart
  #   Example: image.name: pingfederate
  ############################################################
  image:
    repository: pingidentity
    name:
    tag: "2103"
    pullPolicy: Always

  ############################################################
  # External Images
  #
  # Provides ability to use external images for various purposes
  # such as using curl.
  ############################################################
  externalImage:
    # pingtoolkit - based on alpine
    pingtoolkit: pingidentity/pingtoolkit:latest

  ############################################################
  # Services
  #
  # Creates services mapping a port to a targetPort on the
  # corresponding container.
  #
  # dataService    - If set to true, a ClusterIP service is
  #                  created reachable within the cluster.
  #                  A single IP is provided and the service
  #                  will round-robin across the backend containers.
  #
  # clusterService - If set to true, a "headless" service is
  #                  explicityly specifyig "None" for the
  #                  clusterIP.  DNS requests to this service
  #                  will provide one of the IPs of the backend
  #                  containers.
  #
  # https://kubernetes.io/docs/concepts/services-networking/service/
  ############################################################
  services: {}
  #  admin:
  #    containerPort: 9999
  #    servicePort: 9999
  #    ingressPort: 9999
  #    dataService: true
  #  clusterbind:
  #    containerPort: 7600
  #    servicePort: 7600
  #    clusterService: true
  #  clusterfail:
  #    containerPort: 7700
  #    servicePort: 7700
  #    clusterService: true
  #  clusterExternalDNSHostname:


  ############################################################
  # Workload
  #
  # Two workloads supported:
  #  - Deployment
  #  - StatefulSet
  #
  # https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  ############################################################
  workload:
    # Can be Deployment or StatefulSet (see warning above)
    type: Deployment

    annotations: {}

    deployment:
      strategy:
        # Can be RollingUpdate or Recreate
        type: RollingUpdate
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 0

    statefulSet:
      # Used for canary testing if n>0
      partition: 0

      ############################################################
      # Persistent Volumes
      #
      # For every volume defined in the volumes list, 3 items will be
      # created in the StatefulSet
      #   1. container.volumeMounts - name and mountPath
      #   2. template.spec.volume - name and persistentVolumeClaim.claimName
      #   3. spec.volumeClaimTemplates - persistentVolumeClaim
      #
      # https://kubernetes.io/docs/concepts/storage/persistent-volumes/
      ############################################################
      persistentvolume:
        enabled: true
        volumes:
          out-dir:
            mountPath: /opt/out
            persistentVolumeClaim:
              accessModes:
              - ReadWriteOnce
              storageClassName:
              resources:
                requests:
                  storage: 4Gi

    # securityContext
    #
    # Note: The user (9031) and group (9999) represent the current user
    #       and group used with PingIdentity images (except PingDelegator).
    #       The fsGroup is set to same as group, however, it can be set to
    #       any gid number.
    #       The fsGroup is required for any wordloads that volumeMount
    #       a pvc (i.e. StatefulSets)
    securityContext:
      fsGroup: 9999
      # runAsUser: 9031
      # runAsGroup: 9999
      # allowPrivilegeEscalation: false
      # capabilities:
      #   drop:
      #   - ALL

  ############################################################
  # Container Information
  #
  # https://kubernetes.io/docs/concepts/workloads/controllers/
  ############################################################
  container:
    # replicaCount - Instructs Deployment/StatefulSet now many containers to run
    replicaCount: 1

    # resources - Reqeust  0 cpu/0 GB
    #             Limit    4 cpu/0 GB
    resources:
      requests:
        cpu: 0
        memory: 0
      limits:
        cpu: 0
        memory: 0
    nodeSelector: {}
    tolerations: []
    affinity: {}
    terminationGracePeriodSeconds: 30

    envFrom: []
    # Additional envFrom configmap/secret references can be added
    # envFrom:
    # - configMapRef:
    #     name: my-example-configmap
    #     optional: true
    # - secretRef:
    #     name: my-example-secrets
    #     optional: true

  ############################################################
  # Probes
  #
  # Probes have a number of fields that you can use to more precisely control the
  # behavior of liveness and readiness checks.
  #
  # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  ############################################################
  probes:
    liveness:
      command: /opt/liveness.sh
      initialDelaySeconds: 30
      periodSeconds: 30
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 4
    readiness:
      command: /opt/liveness.sh
      initialDelaySeconds: 30
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 4

  ############################################################
  # Licensing
  #
  # license.secret.devOps
  #    Identify the k8s secret to keep the DevOps USER/KEY if used during deployement.
  #
  # NOTE: licenseSecretName can be set in deploying chart values to specify a secret
  #       with actual product license.  This would override the DevOps secret.
  #
  # Using ping-devops utility:
  #    ping-devops generate devops-secret | kubectl apply -f -
  ############################################################
  license:
    secret:
      devOps: devops-secret


#############################################################
# Image/Product values
#############################################################

#############################################################
# ldap-sdk-tools values
#############################################################
ldap-sdk-tools:
  enabled: false
  name: ldap-sdk-tools
  image:
    name: "ldap-sdk-tools"
    tag: edge

  container:
    command: "tail -f /dev/null"

  probes:
    liveness:
      command: echo
    readiness:
      command: echo

#############################################################
# pingfederate-admin values
#############################################################
pingfederate-admin:
  enabled: false
  name: pingfederate-admin
  image:
    name: pingfederate

  container:
    resources:
      requests:
        cpu: 0
        memory: 1Gi
      limits:
        cpu: 2
        memory: 4Gi

  workload:
    deployment:
      strategy:
        type: Recreate

  # Example: If PingFederate Admin relies on pingdirectory for AuthN
  #          Creates init container wait-for on pingdirectory ldaps service
  #
  # container:
  #   waitFor:
  #     pingdirectory:
  #       service: ldaps
  #       timeoutSeconds: 300

  envs:
    SERVER_PROFILE_URL: https://github.com/pingidentity/pingidentity-server-profiles.git
    SERVER_PROFILE_PATH: getting-started/pingfederate

  # Example: Pulling in a secret (called pingfederate-license) into container
  #          mounting the name (license) value into a file (/opt/in/.../pingfederate.lic)
  #
  # secretVolumes:
  #   pingfederate-license:
  #     items:
  #       license: /opt/in/instance/server/default/conf/pingfederate.lic

  # Example: Pulling in a configMap (called pingfederate-props) into container
  #          mounting the name (pf-props) value into a file (/opt/in/.../pingfederate.properties)
  #
  # configMapVolumes:
  #  pingfederate-props:
  #     items:
  #      pf-props: /opt/in/etc/pingfederate.properties

  services:
    https:
      servicePort: 9999
      containerPort: 9999
      ingressPort: 443
      dataService: true
    clusterbind:
      servicePort: 7600
      containerPort: 7600
      clusterService: true
    clusterfail:
      servicePort: 7700
      containerPort: 7700
      clusterService: true
    clusterExternalDNSHostname:

  ingress:
    hosts:
      - host: pingfederate-admin._defaultDomain_
        paths:
        - path: /
          backend:
            serviceName: https
    tls:
      - secretName: _defaultTlsSecret_
        hosts:
          - pingfederate-admin._defaultDomain_

#############################################################
# pingfederate-engine values
#############################################################
pingfederate-engine:
  enabled: false
  name: pingfederate-engine
  image:
    name: pingfederate

  container:
    resources:
      requests:
        cpu: 0
        memory: 1Gi
      limits:
        cpu: 2
        memory: 4Gi
    waitFor:
      pingfederate-admin:
        service: https
        timeoutSeconds: 300

  envs:
    SERVER_PROFILE_URL: https://github.com/pingidentity/pingidentity-server-profiles.git
    SERVER_PROFILE_PATH: getting-started/pingfederate
    PF_ADMIN_PORT: "9999"

  #############################################################
  # Horizontal Pod Autoscaling
  # By defult this is disabled, since there dependencies to the containers
  # CPU and/or Memory limites.
  #
  # If enabled, ensure that a proper container.resource.request.cpu limit is set
  # and coordinated with the a targetCPUUtilizationPercentage or
  # targetMemoryUtilizationPercentage
  #############################################################
  clustering:
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 4
      targetCPUUtilizationPercentage: 75
      # targetMemoryUtilizationPercentage: 50

    autoscalingTemplate: []
    # Custom or additional autoscaling metrics
    # ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-custom-metrics
    # - type: Pods
    #   pods:
    #     metric:
    #       name: custommetric
    #     target:
    #       type: AverageValue
    #       averageValue: 10000m

  services:
    https:
      servicePort: 9031
      containerPort: 9031
      ingressPort: 443
      dataService: true
    clusterbind:
      servicePort: 7600
      containerPort: 7600
      clusterService: true
    clusterfail:
      servicePort: 7700
      containerPort: 7700
      clusterService: true
    clusterExternalDNSHostname:

  ingress:
    hosts:
      - host: pingfederate-engine._defaultDomain_
        paths:
        - path: /
          backend:
            serviceName: https
    tls:
      - secretName: _defaultTlsSecret_
        hosts:
          - pingfederate-engine._defaultDomain_


#############################################################
# test framework
#
# Future
#############################################################
testFramework: {}
